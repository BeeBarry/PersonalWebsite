---
// components/ZoomableImage.astro
interface Props {
    src: string;
    alt: string;
    caption?: string;
}

const { src, alt, caption } = Astro.props;
---

<div class="image-container">
    <img src={src} alt={alt} class="zoomable-image" loading="lazy" />
    {caption && <p class="image-caption">{caption}</p>}
</div>

<style>
    .image-container {
        margin: 2rem 0;
        text-align: center;
    }

    .zoomable-image {
        max-width: 100%;
        border-radius: 8px;
        cursor: zoom-in;
    }

    /* Ny klass för att dölja originalbilden */
    .zoomable-image.hidden {
        opacity: 0;
    }

    @media (max-width: 600px) {
        .zoomable-image {
            cursor: default;
        }
    }

    .image-caption {
        font-size: 0.9rem;
        color: #666;
        margin-top: 0.5rem;
        font-style: italic;
    }

    .zoomed-clone {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        max-width: 80%;
        max-height: 80vh;
        z-index: 1000;
        cursor: zoom-out;
        object-fit: contain;
        border-radius: 8px;
    }

    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.8);
        z-index: 999;
        display: none;
    }

    .overlay.active {
        display: block;
    }
</style>

<script>
    const overlay = document.createElement('div');
    overlay.className = 'overlay';
    document.body.appendChild(overlay);

    const toggleScroll = (disable: boolean) => {
        document.body.style.overflow = disable ? 'hidden' : '';
    };

    const isMobile = () => window.innerWidth <= 600;

    document.querySelectorAll('.zoomable-image').forEach((img) => {
        img.addEventListener('click', (e) => {
            if (isMobile()) return;

            e.stopPropagation();

            if (!document.querySelector('.zoomed-clone')) {
                // Dölj originalbilden
                img.classList.add('hidden');

                const clone = img.cloneNode(true) as HTMLImageElement;
                clone.classList.add('zoomed-clone');
                clone.classList.remove('zoomable-image');
                clone.classList.remove('hidden'); // Ta bort hidden från klonen
                document.body.appendChild(clone);
                overlay.classList.add('active');
                toggleScroll(true);
            }
        });
    });

    document.addEventListener('click', (e) => {
        if (isMobile()) return;

        const zoomedClone = document.querySelector('.zoomed-clone');
        if (zoomedClone && ((e.target as Element).classList.contains('zoomed-clone') || !(e.target as Element).closest('.zoomed-clone'))) {
            // Visa originalbilden igen
            document.querySelector('.zoomable-image.hidden')?.classList.remove('hidden');

            zoomedClone.remove();
            overlay.classList.remove('active');
            toggleScroll(false);
        }
    });
</script>